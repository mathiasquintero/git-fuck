#!/usr/bin/env node

var SimpleGit = require('simple-git');
var path = process.cwd();
var correctBranch = process.argv[2];
var repository = SimpleGit(path);

var empty = function() {};

function handleError(success, error) {
  success = success || empty;
  error = error || empty;
  return function(err, data) {
    if (err && err !== null) {
      error(err);
    } else {
      success(data);
    }
  };
}

function getLastCommitMessage(callback) {
  repository.log(handleError(function(log) {
    var lastCommit = log.all[0];
    var commitToReset = log.all[1];
    if (lastCommit) {
      callback(lastCommit.message, commitToReset.hash);
    } else {
      console.log("git-fuck aborted. No Commit to reset.");
    }
  }));
}

function doSoftResetOfRepo(hash, callback) {
  console.log("Setting back the last commit.");
  repository.reset(["--soft", hash], handleError(function() {
    callback();
  }));
}

function checkoutCorrectBranch(branch, callback) {
  console.log("Switching to correct branch: " + branch);
  repository.checkout(branch, handleError(function () {
    callback();
  }, function() {
    console.log("Creating a new branch for your changes.");
    repository.checkoutLocalBranch(branch, function() {
      callback();
    });
  }));
}

function commitLatestChanges(message, callback) {
  console.log("Commiting to correct branch.");
  repository.commit(message, handleError(function() {
    callback();
  }));
}

function fuck(branch) {
  getLastCommitMessage(function(message, hash) {
    doSoftResetOfRepo(hash, function() {
      checkoutCorrectBranch(branch, function() {
        commitLatestChanges(message, function() {
          console.log("Done. Your changes should now be in the correct branch.");
        });
      });
    });
  });
}

fuck(correctBranch);
